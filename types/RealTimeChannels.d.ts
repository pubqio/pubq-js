import { ChannelEvent } from "./types/Events";
import { ChannelListener, MessageListener } from "./types/Listeners";
import { ChannelState } from "./types/States";
import { CommonOptions } from "./types/CommonOptions";
declare class RealTimeChannels {
    private options;
    private ws;
    private app;
    private channel;
    private events;
    private manager;
    constructor(options: CommonOptions);
    get state(): ChannelState;
    get(channelName: string): this;
    private handleSubscribeEvent;
    private handleUnsubscribeEvent;
    private handleSubscribeFailEvent;
    private handleChannelDataEvent;
    subscribe(event: string, listener: MessageListener): void;
    subscribe(events: string[], listener: MessageListener): void;
    subscribe(listener: MessageListener): void;
    unsubscribe(event: string, listener: MessageListener): void;
    unsubscribe(events: string[], listener: MessageListener): void;
    unsubscribe(event: string): void;
    unsubscribe(events: string[]): void;
    unsubscribe(listener: MessageListener): void;
    unsubscribe(): void;
    on(event: ChannelEvent, listener: ChannelListener): void;
    on(events: ChannelEvent[], listener: ChannelListener): void;
    on(listener: ChannelListener): void;
    once(event: ChannelEvent, listener: ChannelListener): void;
    once(listener: ChannelListener): void;
    off(event: ChannelEvent, listener: Function): void;
    off(events: ChannelEvent[], listener: Function): void;
    off(event: ChannelEvent): void;
    off(events: ChannelEvent[]): void;
    off(listener: Function): void;
    off(): void;
}
export { RealTimeChannels };
